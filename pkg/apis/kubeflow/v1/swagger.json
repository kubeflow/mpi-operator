{
  "swagger": "2.0",
  "info": {
    "description": "Python SDK for MPI-Operator",
    "title": "mpijob",
    "version": "v0.1"
  },
  "paths": {},
  "definitions": {
    "v1.JobCondition": {
      "description": "JobCondition describes the state of the job at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of job condition.",
          "type": "string"
        }
      }
    },
    "v1.JobStatus": {
      "description": "JobStatus represents the current observed state of the training Job.",
      "type": "object",
      "required": [
        "conditions",
        "replicaStatuses"
      ],
      "properties": {
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        },
        "conditions": {
          "description": "Conditions is an array of current observed job conditions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.JobCondition"
          }
        },
        "lastReconcileTime": {
          "description": "Represents last time when the job was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        },
        "replicaStatuses": {
          "description": "ReplicaStatuses is map of ReplicaType and ReplicaStatus, specifies the status of each replica.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaStatus"
          }
        },
        "startTime": {
          "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1.MPIJob": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.MPIJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.JobStatus"
        }
      }
    },
    "v1.MPIJobList": {
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.MPIJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.MPIJobSpec": {
      "type": "object",
      "required": [
        "mpiReplicaSpecs"
      ],
      "properties": {
        "cleanPodPolicy": {
          "description": "CleanPodPolicy defines the policy that whether to kill pods after the job completes. Defaults to None.",
          "type": "string"
        },
        "mainContainer": {
          "description": "MainContainer specifies name of the main container which executes the MPI code.",
          "type": "string"
        },
        "mpiReplicaSpecs": {
          "description": "`MPIReplicaSpecs` contains maps from `MPIReplicaType` to `ReplicaSpec` that specify the MPI replicas to run.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaSpec"
          }
        },
        "runPolicy": {
          "description": "`RunPolicy` encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
          "$ref": "#/definitions/v1.RunPolicy"
        },
        "slotsPerWorker": {
          "description": "Specifies the number of slots per worker used in hostfile. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.ReplicaSpec": {
      "description": "ReplicaSpec is a description of the replica",
      "type": "object",
      "properties": {
        "replicas": {
          "description": "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "restartPolicy": {
          "description": "Restart policy for all replicas within the job. One of Always, OnFailure, Never and ExitCode. Default to Never.",
          "type": "string"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created for this replica. RestartPolicy in PodTemplateSpec will be overide by RestartPolicy in ReplicaSpec",
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }
      }
    },
    "v1.ReplicaStatus": {
      "description": "ReplicaStatus represents the current observed state of the replica.",
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of actively running pods.",
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed.",
          "type": "integer",
          "format": "int32"
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.RunPolicy": {
      "description": "RunPolicy encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
      "type": "object",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "backoffLimit": {
          "description": "Optional number of retries before marking this job failed.",
          "type": "integer",
          "format": "int32"
        },
        "cleanPodPolicy": {
          "description": "CleanPodPolicy defines the policy to kill pods after the job completes. Default to Running.",
          "type": "string"
        },
        "schedulingPolicy": {
          "description": "SchedulingPolicy defines the policy related to scheduling, e.g. gang-scheduling",
          "$ref": "#/definitions/v1.SchedulingPolicy"
        },
        "ttlSecondsAfterFinished": {
          "description": "TTLSecondsAfterFinished is the TTL to clean up jobs. It may take extra ReconcilePeriod seconds for the cleanup, since reconcile gets called periodically. Default to infinite.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.SchedulingPolicy": {
      "description": "SchedulingPolicy encapsulates various scheduling policies of the distributed training job, for example `minAvailable` for gang-scheduling.",
      "type": "object",
      "properties": {
        "minAvailable": {
          "type": "integer",
          "format": "int32"
        },
        "minResources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "priorityClass": {
          "type": "string"
        },
        "queue": {
          "type": "string"
        }
      }
    }
  }
}
